//Work for 0.4.0 or newer
//OG CREDIT: KADEDEV!!!
import flixel.FlxG;
import flixel.text.FlxText;
import flixel.FlxSprite;
import flixel.text.FlxTextBorderStyle;
import funkin.Conductor;
import funkin.Paths;

import funkin.modding.module.Module;
import funkin.play.PlayState;

import funkin.Highscore;

class Main extends Module
{
    //***Settings (need to restart the game after change)*** use true or false
    //TODO: literally Option for it in option menu
    public var disableSplash:Boolean = true; //disable notesplash on sick!

    public var disableHoldCover:Boolean = true; //disable hote sustain effect

    public var centerStrum:Boolean = true; // let note hit on center screen

    public var enableLaneUnderlay:Boolean = centerStrum; // enable black translucent background

    // var shit obviously
    public var insidePlaystate:Boolean = false;

    public var totalNotes:Int = 0;

    public var rating:FlxText;
    public var hasAdded:Boolean = false;

    // From FNF Apro Engine lol
    public var shitsTxt:FlxText;
	public var badsTxt:FlxText;
	public var goodsTxt:FlxText;
	public var sicksTxt:FlxText;
	public var coolsTxt:FlxText;
	public var comboTxt:FlxText;
	public var missesTxt:FlxText;
	public var comboBreaksTxt:FlxText;

    public var backSprite:FlxSprite;

    // https://stackoverflow.com/a/23785753
    public static function floatToStringPrecision(n:Float, prec:Int){
        n = Math.round(n * Math.pow(10, prec));
        var str = ''+n;
        var len = str.length;
        if(len <= prec){
          while(len < prec){
            str = '0'+str;
            len++;
          }
          return '0.'+str;
        }else{
          return str.substr(0, str.length-prec) + '.'+str.substr(str.length-prec);
        }
    }

    public function new()
    {
        super("proui");
    }
    
    public function onSongRetry(event:ScriptEvent)
    {
        totalNotes = 0;
    }

    public function onStateChangeEnd(event:StateChangeScriptEvent)
    {
        if (Std.isOfType(event.targetState, PlayState))
        {
            trace("changed to playstate!");

            totalNotes = 0;
            
            insidePlaystate = true;

        }
        else
        {            
            insidePlaystate = false;
            hasAdded = false;
        }
    }

    public function onCountdownStart(event)
    {
        if (hasAdded)
            return;

            hasAdded = true;
            var ourInstance = PlayState.instance;
            var strumLine = ourInstance.playerStrumline;
            var opStrum = ourInstance.opponentStrumline;

            if (strumLine != null && centerStrum)
                strumLine.x = FlxG.width / 2 - strumLine.width / 2;

            if (opStrum != null && centerStrum)
            {
                for (arrow in opStrum.members)
                {
                    arrow.visible = false;
                }
            }

            var scoreText = ourInstance.scoreText;
            scoreText.x = 10;
            scoreText.y = ourInstance.healthBarBG.y + 10;

            rating = new FlxText(scoreText.x, scoreText.y + 20, FlxG.width, "uwu"); // "Mic'D Up" ah UI :skull:
            rating.setFormat(Paths.font("vcr.ttf"),16,-1,"left",FlxTextBorderStyle.OUTLINE,-16777216);
            rating.zIndex = ourInstance.scoreText.zIndex;
            rating.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(rating);
            rating.cameras = [ourInstance.camHUD];

            comboTxt = new FlxText(scoreText.x, FlxG.height/2-40, 0, "", 20);
            comboTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFFFFFFFF,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            comboTxt.zIndex = ourInstance.scoreText.zIndex;
            comboTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(comboTxt);
            comboTxt.cameras = [ourInstance.camHUD];

            sicksTxt = new FlxText(scoreText.x, comboTxt.y + 20, 0, "", 20);
            sicksTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFF00FFFF,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            sicksTxt.zIndex = ourInstance.scoreText.zIndex;
            sicksTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(sicksTxt);
            sicksTxt.cameras = [ourInstance.camHUD];

            goodsTxt = new FlxText(scoreText.x, comboTxt.y + 40, 0, "", 20);
            goodsTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFF00FF00,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            goodsTxt.zIndex = ourInstance.scoreText.zIndex;
            goodsTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(goodsTxt);
            goodsTxt.cameras = [ourInstance.camHUD];

            badsTxt = new FlxText(scoreText.x, comboTxt.y + 60, 0, "", 20);
            badsTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFFFFFF00,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            badsTxt.zIndex = ourInstance.scoreText.zIndex;
            badsTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(badsTxt);
            badsTxt.cameras = [ourInstance.camHUD];

            shitsTxt = new FlxText(scoreText.x, comboTxt.y + 80, 0, "", 20);
            shitsTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFF808080,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            shitsTxt.zIndex = ourInstance.scoreText.zIndex;
            shitsTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(shitsTxt);
            shitsTxt.cameras = [ourInstance.camHUD];

            missesTxt = new FlxText(scoreText.x, comboTxt.y + 100, 0, "", 20);
            missesTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFFFF0000,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            missesTxt.zIndex = ourInstance.scoreText.zIndex;
            missesTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(missesTxt);
            missesTxt.cameras = [ourInstance.camHUD];

            comboBreaksTxt = new FlxText(scoreText.x, comboTxt.y + 120, 0, "", 20);
            comboBreaksTxt.setFormat(Paths.font("vcr.ttf"), 16, 0xFFFF00FF,"right", FlxTextBorderStyle.OUTLINE,-16777216);
            comboBreaksTxt.zIndex = ourInstance.scoreText.zIndex;
            comboBreaksTxt.scrollFactor = ourInstance.scoreText.scrollFactor;

            ourInstance.add(comboBreaksTxt);
            comboBreaksTxt.cameras = [ourInstance.camHUD];
            
            backSprite = new FlxSprite(0, 0).makeGraphic(110 * 4, FlxG.height * 2);
            backSprite.alpha = 0.3;
            backSprite.color = 0x000000;
            backSprite.zIndex = 2;
            backSprite.x = (FlxG.width / 2 - backSprite.width / 2) - 6;
            backSprite.scrollFactor.set();
            backSprite.visible = enableLaneUnderlay;

            ourInstance.add(backSprite);

            backSprite.cameras = [ourInstance.camHUD];
    }

	override function onNoteMiss(event:NoteScriptEvent)
    {
        if (!insidePlaystate)
            return;

        totalNotes++;
    }

    override function onNoteHit(event)
    {
        if (!insidePlaystate || !event.note.noteData.getMustHitNote())
            return;

        var ourInstance = PlayState.instance;
        var strumLine = ourInstance.playerStrumline;

        event.doesNotesplash = !disableSplash; //disable sick rating splashes effect

        strumLine.hitNote(event.note, true); // stop desaturate for bad & shit note, Its took like fuking 1 hr to figure it out lol :sob:
        totalNotes++;
    }

    override function onUpdate(event)
    {
        if (!insidePlaystate)
            return;

        var ourInstance = PlayState.instance;

        var playerStrumline = ourInstance.playerStrumline;
        var opStrum = ourInstance.opponentStrumline;

        for (note in playerStrumline.noteHoldCovers) //disable hold splashes effect
        {
            note.visible = !disableHoldCover;
        }

        for (note in opStrum.noteHoldCovers) //disable hold splashes effect
        {
            note.visible = !disableHoldCover;
        }

        var perfectHit = Highscore.tallies.sick + Highscore.tallies.good; //that's how fnf 0.4.0 calculating accuracy

        var acc:Float = perfectHit / totalNotes;

         if (totalNotes == 0)
            acc = 1;

        var grade:string;
        var comboBreaks:Int = Highscore.tallies.bad + Highscore.tallies.shit + Highscore.tallies.missed;

        //ikr this code is dumbass instead use switch case or for i shit but who care :>
        if (Highscore.tallies.good == 0 && Highscore.tallies.bad == 0 && Highscore.tallies.shit == 0 && Highscore.tallies.missed == 0)
            grade = "SS"; //Perfect Gold (Sicks! only)
        else if (Highscore.tallies.bad == 0 && Highscore.tallies.shit == 0 && Highscore.tallies.missed == 0)
            grade = "S"; //Perfect Purple (Sicks! & Goods only, no matter good more than sicks or not)
        else if (acc >= 0.9)
            grade = "A"; //Excellent
        else if (acc >= 0.8)
            grade = "B"; //Great
        else if (acc >= 0.6)
            grade = "C"; //Good
        else
            grade = "D"; //Lose

        rating.text = Std.string(floatToStringPrecision(acc * 100,2)) + "% (" + grade + ")";

        comboTxt.text = "Combo: " + Highscore.tallies.combo + "/" + Highscore.tallies.maxCombo;
        sicksTxt.text = "Sick:  " + Highscore.tallies.sick;
        goodsTxt.text = "Good:  " + Highscore.tallies.good;
        badsTxt.text = "Bad:   " + Highscore.tallies.bad;
        shitsTxt.text = "Shit:  " + Highscore.tallies.shit;
        missesTxt.text = "Miss:  " + Highscore.tallies.missed;
        comboBreaksTxt.text = "Break: " + comboBreaks;
    }
}